<!-- rstumm2s -->
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico"/>
    <link rel="stylesheet" href="style.css"/>
    <title>House of Cars Gate</title>
    <style>
    body {
        text-align: center;
    }

    #gate {
        width: 35%;
    }

    #recommended-spot {
        margin: 1cm;
        font-weight: bold;
    }
    #recommended-spot img {
        height: 5em;
    }
    </style>
    <script>
    'use strict';
    if (window.__hoc === undefined) {
        window.__hoc = {};
    }
    __hoc.vgate = (() => {
        (function connect() {
            let socket = new WebSocket('ws://' + location.host + '/ws/vgate');
            socket.onclose = connect;
            socket.onopen = () => {
                __hoc.vgate.requestEnter = license => {
                    socket.send(JSON.stringify({
                        type: 'enter-request',
                        license: license
                    }));
                };
                __hoc.vgate.requestLeave = license => {
                    socket.send(JSON.stringify({
                        type: 'leave-request',
                        license: license
                    }));
                };
                __hoc.vgate.updateReaderButtons = license => {
                    socket.send(JSON.stringify({
                        type: 'get-state',
                        license: license
                    }));
                };
            };

            socket.onmessage = msg => {
                let data = JSON.parse(msg.data);
                switch (data.type) {
                    case 'enter-response':
                        if (!data.permission) return;
                        state(true, data.recommendedSpot);
                        socket.send(JSON.stringify({
                            type: 'opened'
                        }));

                        // simulate vehicle driving in
                        setTimeout(() => {
                            state(false);
                            socket.send(JSON.stringify({
                                type: 'entered',
                                recommendedSpot: data.recommendedSpot,
                                license: data.license
                            }));
                            __hoc.vgate.updateReaderButtons(data.license);
                        }, 1000 + Math.random() * 2000);
                        break;
                    case 'leave-response':
                        if (!data.permission) return;
                        state(true);
                        socket.send(JSON.stringify({
                            type: 'opened'
                        }));

                        // simulate vehicle driving out
                        setTimeout(() => {
                            state(false);
                            socket.send(JSON.stringify({
                                type: 'left',
                                license: data.license
                            }));
                            __hoc.vgate.updateReaderButtons(data.license);
                        }, 1000 + Math.random() * 1000);
                        break;
                    case 'get-state':
                        let form = document.getElementById('license-reader');
                        if (data.license != form.license.value) return;
                        switch (data.state) {
                            case 'Away':
                                form.enter.hidden = false;
                                form.enter.disabled = false;
                                form.leave.hidden = true;
                                break;
                            case 'Leaving':
                                form.enter.hidden = true;
                                form.leave.hidden = false;
                                form.leave.disabled = !data.paid;
                                break;
                            default:
                                form.enter.disabled = true;
                                break;
                        }
                        break;
                }
            };
        })();

        function state(open, recommendedSpot = null) {
            let state = open ? 'open' : 'closed';
            document.getElementById('gate').src = 'gate-' + state + '.svg';
            document.getElementById('license-reader').hidden = open;

            let recommendedSpotElement = document.getElementById('recommended-spot');
            if (recommendedSpot) {
                recommendedSpotElement.hidden = false;
                recommendedSpotElement.getElementsByTagName('h2')[0].innerHTML = recommendedSpot;
            } else {
                recommendedSpotElement.hidden = true;
            }
        }

        return {
            state: state,

            // nop until socket opens
            requestEnter: () => {},
            requestLeave: () => {},
            updateReaderButtons: () => {}
        };
    })();
    </script>
</head>
<body onload="__hoc.vgate.state(false);">
{{>partials/status.html}}

<img id="gate" src="gate-closed.svg"/>

<form id="license-reader" action="javascript:void(0);">
    <!-- FIXME event for auto-filled value on page load -->
    <input name="license" type="text" autofocus="" required=""
        onfocus="__hoc.vgate.updateReaderButtons(value);"
        onkeyup="__hoc.vgate.updateReaderButtons(value);"/>
    <button name="enter" onclick="__hoc.vgate.requestEnter(form.license.value);">Enter</button>
    <button name="leave" onclick="__hoc.vgate.requestLeave(form.license.value);" hidden="">Leave</button>
</form>

<section id="recommended-spot">
    <img src="sign_post.svg"/>
    <h2></h2>
</section>

<p>{{motd}}</p>
</body>
</html>
